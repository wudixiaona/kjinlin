(1)首先，我们来看一下k近邻算法得主体代码
import numpy as np
#用于分类的输入向量是inX，输入的训练样本集为dataSet，
#标签向量为 labels ，最后的参数 k 表示用于选择最近邻居的数目，其中标签向量的元素数目和矩
#阵 dataSet 的行数相同。
def classify0(inX,dataSet,labels,k):
    # 获取 数组 形状的 第一个 参数 a=[[1,2],[1,2],[1,2]]  a.shape = [3,2] a.shape[0] = 3
# 一、
    dataSetSize = dataSet.shape[0]
    # tile 代表了inX，复制为dataSetSize行，1列的数组
# 二、
    diffMat = np.tile(inX,(dataSetSize,1))-dataSet
    # 平方
    sqDiffMat = diffMat**2
    # axis 等于 1 是将 矩阵的每一行 相加
    sqDistances = sqDiffMat.sum(axis=1)
    # 开方
    distances = sqDistances**0.5
# 三、
    # 从小到大 排列
    sortedDistances = distances.argsort()
    classCount = {}
# 四、求出来 最低距离 的 labels结果，存放在classCount 中
    for i in range(k):
        voteIlabel =labels[sortedDistances[i]]
        classCount[voteIlabel] = classCount.get(voteIlabel,0)+1
    sortedClassCount = sorted(classCount.items(),key=operator.itemgetter(1),reverse=True)
    return sortedClassCount[0][0]
（2）接下来，初始化上述代码要使用的数据
# 零   初始化 clasify0  中所需的数据
inX = [2,3]
# 限度 2,2为中介，距离小于 为不喜欢A，大于为喜欢B
dataSet = np.array([[1,2],
          [3,5],
          [1.5,2.5],
          [2.5,3.5]])
labels = ['A','B','A','B']
k=3

# 一、 求出 dataSet 训练数据的 行向量
dataSetSize = dataSet.shape[0] = 4

二、 复制 输入inX 行向量  与dataSet 的 行大小一致 ，由上方1.1图可知，向量两点的最短距离为 1.0= (inX 行向量 - dataSet 的行向量)
diffMat  = np.tile(inX,(dataSetSize,1))  - dataSet= 
[[2,3],   - [1,2],     =  [1,1]
[2,3],  - [3,5],       =  [-1,-2]
[2,3],  - [1.5,2.5],   =   [0.5,0.5]
[2,3]] - [2.5,3.5]]    =  [-0.5,-0.5]
# 1.1 = 将 差集 平方 虽有  下一步 行向量相加
sqDiffMat = diffMat**2 
# 1.2 = 行向量相加
sqDistances  = sqDiffMat.sum(axis=1) (行向量相加)
[(1^2 + 1^2),
...]
# 1.3 = 所得和集  再 开方(**0.5 相当于开方)， 即  求出来了最短距离是多少、 即上方1.1 图的 d
distances  = sqDistances**0.5 = 
[((2)**0.5)   ≈  1.41421
((5)**0.5)    ≈  2.23606
((0.5)**0.5)  ≈  0.707106
((0.5)**0.5)  ≈  0.707106 
...]

# 三、
# argsort : 将distacnces中的元素从小到大排列，提取其对应的index(索引)，然后输出到sortedDistances 
# 即 sortedDistances[0] = distacnces[2] = 0.707106
sortedDistances = distacnces.argsort() = 
[2,3,0,1] 

# 四
# 假设 k=3 i = 0 第一层循环 的结果为
voteIlabel =labels[sortedDistances[i]] = 'A'
classCount[voteIlabel] = classCount.get(voteIlabel,0)+1 = 1 (classCount索引为'A')
# 将遍历存储的 classCount = [('A', 1)]  排序，按照
sortedClassCount = sorted(classCount.items(),key=operator.itemgetter(1),reverse=True)

#   返回第一个 最相近的 值，作为结果， 即最相近的近邻算法
return sortedClassCount[0][0]
